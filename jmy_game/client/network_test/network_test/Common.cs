// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from common.proto</summary>
public static partial class CommonReflection {

  #region Descriptor
  /// <summary>File descriptor for common.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static CommonReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cgxjb21tb24ucHJvdG8aC2Vycm9yLnByb3RvIi8KCE1zZ0Vycm9yEiMKCmVy",
          "cm9yX2NvZGUYASABKA4yDy5Qcm90b0Vycm9yVHlwZSI4ChNNc2dDMlNfTG9n",
          "aW5SZXF1ZXN0Eg8KB2FjY291bnQYASABKAwSEAoIcGFzc3dvcmQYAiABKAwi",
          "UgoNTXNnU2VydmVySW5mbxIKCgJpZBgBIAEoBRIMCgRuYW1lGAIgASgMEhYK",
          "DmlzX21haW50ZW5hbmNlGAMgASgIEg8KB2lzX2J1c3kYBCABKAgiNwoUTXNn",
          "UzJDX0xvZ2luUmVzcG9uc2USHwoHc2VydmVycxgBIAMoCzIOLk1zZ1NlcnZl",
          "ckluZm8iLAoaTXNnQzJTX1NlbGVjdFNlcnZlclJlcXVlc3QSDgoGc2VsX2lk",
          "GAEgASgFIlQKG01zZ1MyQ19TZWxlY3RTZXJ2ZXJSZXNwb25zZRIUCgxzZXNz",
          "aW9uX2NvZGUYASABKAwSEQoJc2VydmVyX2lwGAIgASgMEgwKBHBvcnQYAyAB",
          "KAUiJgoSTXNnQzJTX0VjaG9SZXF1ZXN0EhAKCGVjaG9fc3RyGAEgASgMIicK",
          "E01zZ1MyQ19FY2hvUmVzcG9uc2USEAoIZWNob19zdHIYASABKAwiPwoVTXNn",
          "QzJTX0dldFJvbGVSZXF1ZXN0Eg8KB2FjY291bnQYASABKAwSFQoNZW50ZXJf",
          "c2Vzc2lvbhgCIAEoDCJrCg9Nc2dCYXNlUm9sZURhdGESDwoHcm9sZV9pZBgB",
          "IAEoBBIRCgluaWNrX25hbWUYAiABKAwSDAoEcmFjZRgDIAEoBRILCgNzZXgY",
          "BCABKAUSCgoCaHAYBSABKAUSDQoFbGV2ZWwYBiABKAUiWAoWTXNnUzJDX0dl",
          "dFJvbGVSZXNwb25zZRIZChFyZWNvbm5lY3Rfc2Vzc2lvbhgBIAEoDBIjCgly",
          "b2xlX2RhdGEYAiABKAsyEC5Nc2dCYXNlUm9sZURhdGEiSAoYTXNnQzJTX0Ny",
          "ZWF0ZVJvbGVSZXF1ZXN0EhEKCW5pY2tfbmFtZRgBIAEoDBIMCgRyYWNlGAIg",
          "ASgFEgsKA3NleBgDIAEoBSJAChlNc2dTMkNfQ3JlYXRlUm9sZVJlc3BvbnNl",
          "EiMKCXJvbGVfZGF0YRgBIAEoCzIQLk1zZ0Jhc2VSb2xlRGF0YSIrChhNc2dD",
          "MlNfRGVsZXRlUm9sZVJlcXVlc3QSDwoHcm9sZV9pZBgBIAEoBCIsChlNc2dT",
          "MkNfRGVsZXRlUm9sZVJlc3BvbnNlEg8KB3JvbGVfaWQYASABKAQiGQoXTXNn",
          "QzJTX0VudGVyR2FtZVJlcXVlc3QiGgoYTXNnUzJDX0VudGVyR2FtZVJlc3Bv",
          "bnNlIiAKHk1zZ1MyQ19FbnRlckdhbWVDb21wbGV0ZU5vdGlmeSIZChdNc2dD",
          "MlNfTGVhdmVHYW1lUmVxdWVzdCIaChhNc2dTMkNfTGVhdmVHYW1lUmVzcG9u",
          "c2UiRQoXTXNnQzJTX1JlY29ubmVjdFJlcXVlc3QSDwoHYWNjb3VudBgBIAEo",
          "DBIZChFyZWNvbm5lY3Rfc2Vzc2lvbhgCIAEoDCI1ChhNc2dTMkNfUmVjb25u",
          "ZWN0UmVzcG9uc2USGQoRcmVjb25uZWN0X3Nlc3Npb24YASABKAwiWgoSTXNn",
          "QzJTX0NoYXRSZXF1ZXN0Eg8KB2NvbnRlbnQYASABKAwSEQoJY2hhdF90eXBl",
          "GAIgASgNEg8KB2NoYW5uZWwYAyABKA0SDwoHcm9sZV9pZBgEIAEoBCJbChNN",
          "c2dTMkNfQ2hhdFJlc3BvbnNlEg8KB2NvbnRlbnQYASABKAwSEQoJY2hhdF90",
          "eXBlGAIgASgNEg8KB2NoYW5uZWwYAyABKA0SDwoHcm9sZV9pZBgEIAEoBCJ2",
          "ChFNc2dTMkNfQ2hhdE5vdGlmeRIPCgdjb250ZW50GAEgASgMEhEKCWNoYXRf",
          "dHlwZRgCIAEoDRIPCgdjaGFubmVsGAMgASgNEhQKDGZyb21fcm9sZV9pZBgE",
          "IAEoBBIWCg5mcm9tX25pY2tfbmFtZRgFIAEoDCJAChlNc2dDMlNfU2V0Um9s",
          "ZURhdGFSZXF1ZXN0EiMKCXJvbGVfZGF0YRgBIAEoCzIQLk1zZ0Jhc2VSb2xl",
          "RGF0YSJBChpNc2dTMkNfU2V0Um9sZURhdGFSZXNwb25zZRIjCglyb2xlX2Rh",
          "dGEYASABKAsyEC5Nc2dCYXNlUm9sZURhdGEq7AYKCU1zZ0lkVHlwZRIOCgpN",
          "U0dJRF9OT05FEAASDwoLTVNHSURfRVJST1IQARIcChdNU0dJRF9DMlNfTE9H",
          "SU5fUkVRVUVTVBCQThIdChhNU0dJRF9TMkNfTE9HSU5fUkVTUE9OU0UQkU4S",
          "JAofTVNHSURfQzJTX1NFTEVDVF9TRVJWRVJfUkVRVUVTVBCSThIlCiBNU0dJ",
          "RF9TMkNfU0VMRUNUX1NFUlZFUl9SRVNQT05TRRCTThIfChpNU0dJRF9DMlNf",
          "R0VUX1JPTEVfUkVRVUVTVBCaThIgChtNU0dJRF9TMkNfR0VUX1JPTEVfUkVT",
          "UE9OU0UQm04SIgodTVNHSURfQzJTX0NSRUFURV9ST0xFX1JFUVVFU1QQnk4S",
          "IwoeTVNHSURfUzJDX0NSRUFURV9ST0xFX1JFU1BPTlNFEJ9OEiIKHU1TR0lE",
          "X0MyU19ERUxFVEVfUk9MRV9SRVFVRVNUEKBOEiMKHk1TR0lEX1MyQ19ERUxF",
          "VEVfUk9MRV9SRVNQT05TRRChThIhChxNU0dJRF9DMlNfRU5URVJfR0FNRV9S",
          "RVFVRVNUEKROEiIKHU1TR0lEX1MyQ19FTlRFUl9HQU1FX1JFU1BPTlNFEKVO",
          "EikKJE1TR0lEX1MyQ19FTlRFUl9HQU1FX0NPTVBMRVRFX05PVElGWRCmThIh",
          "ChxNU0dJRF9DMlNfTEVBVkVfR0FNRV9SRVFVRVNUEKdOEiIKHU1TR0lEX1My",
          "Q19MRUFWRV9HQU1FX1JFU1BPTlNFEKhOEiAKG01TR0lEX0MyU19SRUNPTk5F",
          "Q1RfUkVRVUVTVBCpThIhChxNU0dJRF9TMkNfUkVDT05ORUNUX1JFU1BPTlNF",
          "EKpOEhsKFk1TR0lEX0MyU19DSEFUX1JFUVVFU1QQ9E4SHAoXTVNHSURfUzJD",
          "X0NIQVRfUkVTUE9OU0UQ9U4SGgoVTVNHSURfUzJDX0NIQVRfTk9USUZZEPZO",
          "EiUKH01TR0lEX0MyU19TRVRfUk9MRV9EQVRBX1JFUVVFU1QQuZQBEiYKIE1T",
          "R0lEX1MyQ19TRVRfUk9MRV9EQVRBX1JFU1BPTlNFELqUARIcChZNU0dJRF9D",
          "MlNfRUNIT19SRVFVRVNUELuUARIdChdNU0dJRF9TMkNfRUNIT19SRVNQT05T",
          "RRC8lAFiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::ErrorReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::MsgIdType), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgError), global::MsgError.Parser, new[]{ "ErrorCode" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgC2S_LoginRequest), global::MsgC2S_LoginRequest.Parser, new[]{ "Account", "Password" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgServerInfo), global::MsgServerInfo.Parser, new[]{ "Id", "Name", "IsMaintenance", "IsBusy" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgS2C_LoginResponse), global::MsgS2C_LoginResponse.Parser, new[]{ "Servers" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgC2S_SelectServerRequest), global::MsgC2S_SelectServerRequest.Parser, new[]{ "SelId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgS2C_SelectServerResponse), global::MsgS2C_SelectServerResponse.Parser, new[]{ "SessionCode", "ServerIp", "Port" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgC2S_EchoRequest), global::MsgC2S_EchoRequest.Parser, new[]{ "EchoStr" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgS2C_EchoResponse), global::MsgS2C_EchoResponse.Parser, new[]{ "EchoStr" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgC2S_GetRoleRequest), global::MsgC2S_GetRoleRequest.Parser, new[]{ "Account", "EnterSession" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgBaseRoleData), global::MsgBaseRoleData.Parser, new[]{ "RoleId", "NickName", "Race", "Sex", "Hp", "Level" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgS2C_GetRoleResponse), global::MsgS2C_GetRoleResponse.Parser, new[]{ "ReconnectSession", "RoleData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgC2S_CreateRoleRequest), global::MsgC2S_CreateRoleRequest.Parser, new[]{ "NickName", "Race", "Sex" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgS2C_CreateRoleResponse), global::MsgS2C_CreateRoleResponse.Parser, new[]{ "RoleData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgC2S_DeleteRoleRequest), global::MsgC2S_DeleteRoleRequest.Parser, new[]{ "RoleId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgS2C_DeleteRoleResponse), global::MsgS2C_DeleteRoleResponse.Parser, new[]{ "RoleId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgC2S_EnterGameRequest), global::MsgC2S_EnterGameRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgS2C_EnterGameResponse), global::MsgS2C_EnterGameResponse.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgS2C_EnterGameCompleteNotify), global::MsgS2C_EnterGameCompleteNotify.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgC2S_LeaveGameRequest), global::MsgC2S_LeaveGameRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgS2C_LeaveGameResponse), global::MsgS2C_LeaveGameResponse.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgC2S_ReconnectRequest), global::MsgC2S_ReconnectRequest.Parser, new[]{ "Account", "ReconnectSession" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgS2C_ReconnectResponse), global::MsgS2C_ReconnectResponse.Parser, new[]{ "ReconnectSession" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgC2S_ChatRequest), global::MsgC2S_ChatRequest.Parser, new[]{ "Content", "ChatType", "Channel", "RoleId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgS2C_ChatResponse), global::MsgS2C_ChatResponse.Parser, new[]{ "Content", "ChatType", "Channel", "RoleId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgS2C_ChatNotify), global::MsgS2C_ChatNotify.Parser, new[]{ "Content", "ChatType", "Channel", "FromRoleId", "FromNickName" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgC2S_SetRoleDataRequest), global::MsgC2S_SetRoleDataRequest.Parser, new[]{ "RoleData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgS2C_SetRoleDataResponse), global::MsgS2C_SetRoleDataResponse.Parser, new[]{ "RoleData" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum MsgIdType {
  [pbr::OriginalName("MSGID_NONE")] MsgidNone = 0,
  [pbr::OriginalName("MSGID_ERROR")] MsgidError = 1,
  /// <summary>
  /// Client &lt;-> LoginServer 
  /// </summary>
  [pbr::OriginalName("MSGID_C2S_LOGIN_REQUEST")] MsgidC2SLoginRequest = 10000,
  /// <summary>
  /// login response
  /// </summary>
  [pbr::OriginalName("MSGID_S2C_LOGIN_RESPONSE")] MsgidS2CLoginResponse = 10001,
  /// <summary>
  /// select server
  /// </summary>
  [pbr::OriginalName("MSGID_C2S_SELECT_SERVER_REQUEST")] MsgidC2SSelectServerRequest = 10002,
  /// <summary>
  /// select server response
  /// </summary>
  [pbr::OriginalName("MSGID_S2C_SELECT_SERVER_RESPONSE")] MsgidS2CSelectServerResponse = 10003,
  /// <summary>
  /// Client &lt;-> GateServer 
  /// </summary>
  [pbr::OriginalName("MSGID_C2S_GET_ROLE_REQUEST")] MsgidC2SGetRoleRequest = 10010,
  /// <summary>
  /// get role response
  /// </summary>
  [pbr::OriginalName("MSGID_S2C_GET_ROLE_RESPONSE")] MsgidS2CGetRoleResponse = 10011,
  /// <summary>
  ///MSGID_C2S_ROLELIST_REQUEST				= 10012; // role list request
  ///MSGID_C2S_ROLELIST_RESPONSE				= 10013; // role list response
  /// </summary>
  [pbr::OriginalName("MSGID_C2S_CREATE_ROLE_REQUEST")] MsgidC2SCreateRoleRequest = 10014,
  /// <summary>
  /// create role response
  /// </summary>
  [pbr::OriginalName("MSGID_S2C_CREATE_ROLE_RESPONSE")] MsgidS2CCreateRoleResponse = 10015,
  /// <summary>
  /// delete role request
  /// </summary>
  [pbr::OriginalName("MSGID_C2S_DELETE_ROLE_REQUEST")] MsgidC2SDeleteRoleRequest = 10016,
  /// <summary>
  /// delete role response
  /// </summary>
  [pbr::OriginalName("MSGID_S2C_DELETE_ROLE_RESPONSE")] MsgidS2CDeleteRoleResponse = 10017,
  /// <summary>
  /// enter game request
  /// </summary>
  [pbr::OriginalName("MSGID_C2S_ENTER_GAME_REQUEST")] MsgidC2SEnterGameRequest = 10020,
  /// <summary>
  /// enter game response
  /// </summary>
  [pbr::OriginalName("MSGID_S2C_ENTER_GAME_RESPONSE")] MsgidS2CEnterGameResponse = 10021,
  /// <summary>
  /// enter game complete notify
  /// </summary>
  [pbr::OriginalName("MSGID_S2C_ENTER_GAME_COMPLETE_NOTIFY")] MsgidS2CEnterGameCompleteNotify = 10022,
  /// <summary>
  /// leave game request
  /// </summary>
  [pbr::OriginalName("MSGID_C2S_LEAVE_GAME_REQUEST")] MsgidC2SLeaveGameRequest = 10023,
  /// <summary>
  /// leave game response
  /// </summary>
  [pbr::OriginalName("MSGID_S2C_LEAVE_GAME_RESPONSE")] MsgidS2CLeaveGameResponse = 10024,
  /// <summary>
  /// reconnect gate server
  /// </summary>
  [pbr::OriginalName("MSGID_C2S_RECONNECT_REQUEST")] MsgidC2SReconnectRequest = 10025,
  /// <summary>
  /// reconnect response
  /// </summary>
  [pbr::OriginalName("MSGID_S2C_RECONNECT_RESPONSE")] MsgidS2CReconnectResponse = 10026,
  /// <summary>
  /// chat request
  /// </summary>
  [pbr::OriginalName("MSGID_C2S_CHAT_REQUEST")] MsgidC2SChatRequest = 10100,
  /// <summary>
  /// chat response
  /// </summary>
  [pbr::OriginalName("MSGID_S2C_CHAT_RESPONSE")] MsgidS2CChatResponse = 10101,
  /// <summary>
  /// chat notify
  /// </summary>
  [pbr::OriginalName("MSGID_S2C_CHAT_NOTIFY")] MsgidS2CChatNotify = 10102,
  /// <summary>
  /// test msg
  /// </summary>
  [pbr::OriginalName("MSGID_C2S_SET_ROLE_DATA_REQUEST")] MsgidC2SSetRoleDataRequest = 19001,
  /// <summary>
  /// set role data response
  /// </summary>
  [pbr::OriginalName("MSGID_S2C_SET_ROLE_DATA_RESPONSE")] MsgidS2CSetRoleDataResponse = 19002,
  /// <summary>
  /// echo request
  /// </summary>
  [pbr::OriginalName("MSGID_C2S_ECHO_REQUEST")] MsgidC2SEchoRequest = 19003,
  /// <summary>
  /// echo response
  /// </summary>
  [pbr::OriginalName("MSGID_S2C_ECHO_RESPONSE")] MsgidS2CEchoResponse = 19004,
}

#endregion

#region Messages
public sealed partial class MsgError : pb::IMessage<MsgError> {
  private static readonly pb::MessageParser<MsgError> _parser = new pb::MessageParser<MsgError>(() => new MsgError());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgError> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgError() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgError(MsgError other) : this() {
    errorCode_ = other.errorCode_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgError Clone() {
    return new MsgError(this);
  }

  /// <summary>Field number for the "error_code" field.</summary>
  public const int ErrorCodeFieldNumber = 1;
  private global::ProtoErrorType errorCode_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProtoErrorType ErrorCode {
    get { return errorCode_; }
    set {
      errorCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgError);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgError other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ErrorCode != other.ErrorCode) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ErrorCode != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) ErrorCode);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ErrorCode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgError other) {
    if (other == null) {
      return;
    }
    if (other.ErrorCode != 0) {
      ErrorCode = other.ErrorCode;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          errorCode_ = (global::ProtoErrorType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
/// client -> login  [MSGID_C2S_LOGIN_REQUEST]  login request, send to login server
/// </summary>
public sealed partial class MsgC2S_LoginRequest : pb::IMessage<MsgC2S_LoginRequest> {
  private static readonly pb::MessageParser<MsgC2S_LoginRequest> _parser = new pb::MessageParser<MsgC2S_LoginRequest>(() => new MsgC2S_LoginRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgC2S_LoginRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_LoginRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_LoginRequest(MsgC2S_LoginRequest other) : this() {
    account_ = other.account_;
    password_ = other.password_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_LoginRequest Clone() {
    return new MsgC2S_LoginRequest(this);
  }

  /// <summary>Field number for the "account" field.</summary>
  public const int AccountFieldNumber = 1;
  private pb::ByteString account_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Account {
    get { return account_; }
    set {
      account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 2;
  private pb::ByteString password_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgC2S_LoginRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgC2S_LoginRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Account != other.Account) return false;
    if (Password != other.Password) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Account.Length != 0) hash ^= Account.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Account.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Account);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Password);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Account.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Account);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Password);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgC2S_LoginRequest other) {
    if (other == null) {
      return;
    }
    if (other.Account.Length != 0) {
      Account = other.Account;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Account = input.ReadBytes();
          break;
        }
        case 18: {
          Password = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class MsgServerInfo : pb::IMessage<MsgServerInfo> {
  private static readonly pb::MessageParser<MsgServerInfo> _parser = new pb::MessageParser<MsgServerInfo>(() => new MsgServerInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgServerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgServerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgServerInfo(MsgServerInfo other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    isMaintenance_ = other.isMaintenance_;
    isBusy_ = other.isBusy_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgServerInfo Clone() {
    return new MsgServerInfo(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private pb::ByteString name_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "is_maintenance" field.</summary>
  public const int IsMaintenanceFieldNumber = 3;
  private bool isMaintenance_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsMaintenance {
    get { return isMaintenance_; }
    set {
      isMaintenance_ = value;
    }
  }

  /// <summary>Field number for the "is_busy" field.</summary>
  public const int IsBusyFieldNumber = 4;
  private bool isBusy_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsBusy {
    get { return isBusy_; }
    set {
      isBusy_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgServerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgServerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (IsMaintenance != other.IsMaintenance) return false;
    if (IsBusy != other.IsBusy) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (IsMaintenance != false) hash ^= IsMaintenance.GetHashCode();
    if (IsBusy != false) hash ^= IsBusy.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Name);
    }
    if (IsMaintenance != false) {
      output.WriteRawTag(24);
      output.WriteBool(IsMaintenance);
    }
    if (IsBusy != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsBusy);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
    }
    if (IsMaintenance != false) {
      size += 1 + 1;
    }
    if (IsBusy != false) {
      size += 1 + 1;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgServerInfo other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.IsMaintenance != false) {
      IsMaintenance = other.IsMaintenance;
    }
    if (other.IsBusy != false) {
      IsBusy = other.IsBusy;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadBytes();
          break;
        }
        case 24: {
          IsMaintenance = input.ReadBool();
          break;
        }
        case 32: {
          IsBusy = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// login -> client  [MSGID_S2C_LOGIN_RESPONSE]  login response
/// </summary>
public sealed partial class MsgS2C_LoginResponse : pb::IMessage<MsgS2C_LoginResponse> {
  private static readonly pb::MessageParser<MsgS2C_LoginResponse> _parser = new pb::MessageParser<MsgS2C_LoginResponse>(() => new MsgS2C_LoginResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgS2C_LoginResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_LoginResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_LoginResponse(MsgS2C_LoginResponse other) : this() {
    servers_ = other.servers_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_LoginResponse Clone() {
    return new MsgS2C_LoginResponse(this);
  }

  /// <summary>Field number for the "servers" field.</summary>
  public const int ServersFieldNumber = 1;
  private static readonly pb::FieldCodec<global::MsgServerInfo> _repeated_servers_codec
      = pb::FieldCodec.ForMessage(10, global::MsgServerInfo.Parser);
  private readonly pbc::RepeatedField<global::MsgServerInfo> servers_ = new pbc::RepeatedField<global::MsgServerInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MsgServerInfo> Servers {
    get { return servers_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgS2C_LoginResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgS2C_LoginResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!servers_.Equals(other.servers_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= servers_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    servers_.WriteTo(output, _repeated_servers_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += servers_.CalculateSize(_repeated_servers_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgS2C_LoginResponse other) {
    if (other == null) {
      return;
    }
    servers_.Add(other.servers_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          servers_.AddEntriesFrom(input, _repeated_servers_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// client -> login  [MSGID_C2S_SELECT_SERVER_REQUEST]  request to select server, and then notify gate server
/// </summary>
public sealed partial class MsgC2S_SelectServerRequest : pb::IMessage<MsgC2S_SelectServerRequest> {
  private static readonly pb::MessageParser<MsgC2S_SelectServerRequest> _parser = new pb::MessageParser<MsgC2S_SelectServerRequest>(() => new MsgC2S_SelectServerRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgC2S_SelectServerRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_SelectServerRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_SelectServerRequest(MsgC2S_SelectServerRequest other) : this() {
    selId_ = other.selId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_SelectServerRequest Clone() {
    return new MsgC2S_SelectServerRequest(this);
  }

  /// <summary>Field number for the "sel_id" field.</summary>
  public const int SelIdFieldNumber = 1;
  private int selId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SelId {
    get { return selId_; }
    set {
      selId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgC2S_SelectServerRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgC2S_SelectServerRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SelId != other.SelId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SelId != 0) hash ^= SelId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SelId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(SelId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SelId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgC2S_SelectServerRequest other) {
    if (other == null) {
      return;
    }
    if (other.SelId != 0) {
      SelId = other.SelId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          SelId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// login -> client  [MSGID_S2C_SELECT_SERVER_RESPONSE]  after get response from gate server, to response client select result
/// </summary>
public sealed partial class MsgS2C_SelectServerResponse : pb::IMessage<MsgS2C_SelectServerResponse> {
  private static readonly pb::MessageParser<MsgS2C_SelectServerResponse> _parser = new pb::MessageParser<MsgS2C_SelectServerResponse>(() => new MsgS2C_SelectServerResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgS2C_SelectServerResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_SelectServerResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_SelectServerResponse(MsgS2C_SelectServerResponse other) : this() {
    sessionCode_ = other.sessionCode_;
    serverIp_ = other.serverIp_;
    port_ = other.port_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_SelectServerResponse Clone() {
    return new MsgS2C_SelectServerResponse(this);
  }

  /// <summary>Field number for the "session_code" field.</summary>
  public const int SessionCodeFieldNumber = 1;
  private pb::ByteString sessionCode_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString SessionCode {
    get { return sessionCode_; }
    set {
      sessionCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "server_ip" field.</summary>
  public const int ServerIpFieldNumber = 2;
  private pb::ByteString serverIp_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ServerIp {
    get { return serverIp_; }
    set {
      serverIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "port" field.</summary>
  public const int PortFieldNumber = 3;
  private int port_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Port {
    get { return port_; }
    set {
      port_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgS2C_SelectServerResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgS2C_SelectServerResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionCode != other.SessionCode) return false;
    if (ServerIp != other.ServerIp) return false;
    if (Port != other.Port) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionCode.Length != 0) hash ^= SessionCode.GetHashCode();
    if (ServerIp.Length != 0) hash ^= ServerIp.GetHashCode();
    if (Port != 0) hash ^= Port.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionCode.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(SessionCode);
    }
    if (ServerIp.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(ServerIp);
    }
    if (Port != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Port);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionCode.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(SessionCode);
    }
    if (ServerIp.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ServerIp);
    }
    if (Port != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgS2C_SelectServerResponse other) {
    if (other == null) {
      return;
    }
    if (other.SessionCode.Length != 0) {
      SessionCode = other.SessionCode;
    }
    if (other.ServerIp.Length != 0) {
      ServerIp = other.ServerIp;
    }
    if (other.Port != 0) {
      Port = other.Port;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          SessionCode = input.ReadBytes();
          break;
        }
        case 18: {
          ServerIp = input.ReadBytes();
          break;
        }
        case 24: {
          Port = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// client -> login  [MSGID_C2S_ECHO_REQUEST]
/// </summary>
public sealed partial class MsgC2S_EchoRequest : pb::IMessage<MsgC2S_EchoRequest> {
  private static readonly pb::MessageParser<MsgC2S_EchoRequest> _parser = new pb::MessageParser<MsgC2S_EchoRequest>(() => new MsgC2S_EchoRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgC2S_EchoRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_EchoRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_EchoRequest(MsgC2S_EchoRequest other) : this() {
    echoStr_ = other.echoStr_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_EchoRequest Clone() {
    return new MsgC2S_EchoRequest(this);
  }

  /// <summary>Field number for the "echo_str" field.</summary>
  public const int EchoStrFieldNumber = 1;
  private pb::ByteString echoStr_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString EchoStr {
    get { return echoStr_; }
    set {
      echoStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgC2S_EchoRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgC2S_EchoRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EchoStr != other.EchoStr) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EchoStr.Length != 0) hash ^= EchoStr.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EchoStr.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(EchoStr);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EchoStr.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(EchoStr);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgC2S_EchoRequest other) {
    if (other == null) {
      return;
    }
    if (other.EchoStr.Length != 0) {
      EchoStr = other.EchoStr;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          EchoStr = input.ReadBytes();
          break;
        }
      }
    }
  }

}

/// <summary>
/// login -> client  [MSGID_S2C_ECHO_RESPONSE]
/// </summary>
public sealed partial class MsgS2C_EchoResponse : pb::IMessage<MsgS2C_EchoResponse> {
  private static readonly pb::MessageParser<MsgS2C_EchoResponse> _parser = new pb::MessageParser<MsgS2C_EchoResponse>(() => new MsgS2C_EchoResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgS2C_EchoResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_EchoResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_EchoResponse(MsgS2C_EchoResponse other) : this() {
    echoStr_ = other.echoStr_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_EchoResponse Clone() {
    return new MsgS2C_EchoResponse(this);
  }

  /// <summary>Field number for the "echo_str" field.</summary>
  public const int EchoStrFieldNumber = 1;
  private pb::ByteString echoStr_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString EchoStr {
    get { return echoStr_; }
    set {
      echoStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgS2C_EchoResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgS2C_EchoResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EchoStr != other.EchoStr) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EchoStr.Length != 0) hash ^= EchoStr.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EchoStr.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(EchoStr);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EchoStr.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(EchoStr);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgS2C_EchoResponse other) {
    if (other == null) {
      return;
    }
    if (other.EchoStr.Length != 0) {
      EchoStr = other.EchoStr;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          EchoStr = input.ReadBytes();
          break;
        }
      }
    }
  }

}

/// <summary>
/// client -> gate  [MSGID_C2S_GET_ROLE_REQUEST]
/// </summary>
public sealed partial class MsgC2S_GetRoleRequest : pb::IMessage<MsgC2S_GetRoleRequest> {
  private static readonly pb::MessageParser<MsgC2S_GetRoleRequest> _parser = new pb::MessageParser<MsgC2S_GetRoleRequest>(() => new MsgC2S_GetRoleRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgC2S_GetRoleRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_GetRoleRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_GetRoleRequest(MsgC2S_GetRoleRequest other) : this() {
    account_ = other.account_;
    enterSession_ = other.enterSession_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_GetRoleRequest Clone() {
    return new MsgC2S_GetRoleRequest(this);
  }

  /// <summary>Field number for the "account" field.</summary>
  public const int AccountFieldNumber = 1;
  private pb::ByteString account_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Account {
    get { return account_; }
    set {
      account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "enter_session" field.</summary>
  public const int EnterSessionFieldNumber = 2;
  private pb::ByteString enterSession_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString EnterSession {
    get { return enterSession_; }
    set {
      enterSession_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgC2S_GetRoleRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgC2S_GetRoleRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Account != other.Account) return false;
    if (EnterSession != other.EnterSession) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Account.Length != 0) hash ^= Account.GetHashCode();
    if (EnterSession.Length != 0) hash ^= EnterSession.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Account.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Account);
    }
    if (EnterSession.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(EnterSession);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Account.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Account);
    }
    if (EnterSession.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(EnterSession);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgC2S_GetRoleRequest other) {
    if (other == null) {
      return;
    }
    if (other.Account.Length != 0) {
      Account = other.Account;
    }
    if (other.EnterSession.Length != 0) {
      EnterSession = other.EnterSession;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Account = input.ReadBytes();
          break;
        }
        case 18: {
          EnterSession = input.ReadBytes();
          break;
        }
      }
    }
  }

}

/// <summary>
/// role list data
/// </summary>
public sealed partial class MsgBaseRoleData : pb::IMessage<MsgBaseRoleData> {
  private static readonly pb::MessageParser<MsgBaseRoleData> _parser = new pb::MessageParser<MsgBaseRoleData>(() => new MsgBaseRoleData());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgBaseRoleData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgBaseRoleData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgBaseRoleData(MsgBaseRoleData other) : this() {
    roleId_ = other.roleId_;
    nickName_ = other.nickName_;
    race_ = other.race_;
    sex_ = other.sex_;
    hp_ = other.hp_;
    level_ = other.level_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgBaseRoleData Clone() {
    return new MsgBaseRoleData(this);
  }

  /// <summary>Field number for the "role_id" field.</summary>
  public const int RoleIdFieldNumber = 1;
  private ulong roleId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoleId {
    get { return roleId_; }
    set {
      roleId_ = value;
    }
  }

  /// <summary>Field number for the "nick_name" field.</summary>
  public const int NickNameFieldNumber = 2;
  private pb::ByteString nickName_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString NickName {
    get { return nickName_; }
    set {
      nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "race" field.</summary>
  public const int RaceFieldNumber = 3;
  private int race_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Race {
    get { return race_; }
    set {
      race_ = value;
    }
  }

  /// <summary>Field number for the "sex" field.</summary>
  public const int SexFieldNumber = 4;
  private int sex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Sex {
    get { return sex_; }
    set {
      sex_ = value;
    }
  }

  /// <summary>Field number for the "hp" field.</summary>
  public const int HpFieldNumber = 5;
  private int hp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Hp {
    get { return hp_; }
    set {
      hp_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 6;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgBaseRoleData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgBaseRoleData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoleId != other.RoleId) return false;
    if (NickName != other.NickName) return false;
    if (Race != other.Race) return false;
    if (Sex != other.Sex) return false;
    if (Hp != other.Hp) return false;
    if (Level != other.Level) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoleId != 0UL) hash ^= RoleId.GetHashCode();
    if (NickName.Length != 0) hash ^= NickName.GetHashCode();
    if (Race != 0) hash ^= Race.GetHashCode();
    if (Sex != 0) hash ^= Sex.GetHashCode();
    if (Hp != 0) hash ^= Hp.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoleId != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(RoleId);
    }
    if (NickName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(NickName);
    }
    if (Race != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Race);
    }
    if (Sex != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Sex);
    }
    if (Hp != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Hp);
    }
    if (Level != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Level);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoleId != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
    }
    if (NickName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(NickName);
    }
    if (Race != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Race);
    }
    if (Sex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
    }
    if (Hp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgBaseRoleData other) {
    if (other == null) {
      return;
    }
    if (other.RoleId != 0UL) {
      RoleId = other.RoleId;
    }
    if (other.NickName.Length != 0) {
      NickName = other.NickName;
    }
    if (other.Race != 0) {
      Race = other.Race;
    }
    if (other.Sex != 0) {
      Sex = other.Sex;
    }
    if (other.Hp != 0) {
      Hp = other.Hp;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoleId = input.ReadUInt64();
          break;
        }
        case 18: {
          NickName = input.ReadBytes();
          break;
        }
        case 24: {
          Race = input.ReadInt32();
          break;
        }
        case 32: {
          Sex = input.ReadInt32();
          break;
        }
        case 40: {
          Hp = input.ReadInt32();
          break;
        }
        case 48: {
          Level = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// gate -> client  [MSGID_S2C_GET_ROLE_RESPONSE]
/// </summary>
public sealed partial class MsgS2C_GetRoleResponse : pb::IMessage<MsgS2C_GetRoleResponse> {
  private static readonly pb::MessageParser<MsgS2C_GetRoleResponse> _parser = new pb::MessageParser<MsgS2C_GetRoleResponse>(() => new MsgS2C_GetRoleResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgS2C_GetRoleResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_GetRoleResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_GetRoleResponse(MsgS2C_GetRoleResponse other) : this() {
    reconnectSession_ = other.reconnectSession_;
    RoleData = other.roleData_ != null ? other.RoleData.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_GetRoleResponse Clone() {
    return new MsgS2C_GetRoleResponse(this);
  }

  /// <summary>Field number for the "reconnect_session" field.</summary>
  public const int ReconnectSessionFieldNumber = 1;
  private pb::ByteString reconnectSession_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ReconnectSession {
    get { return reconnectSession_; }
    set {
      reconnectSession_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "role_data" field.</summary>
  public const int RoleDataFieldNumber = 2;
  private global::MsgBaseRoleData roleData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MsgBaseRoleData RoleData {
    get { return roleData_; }
    set {
      roleData_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgS2C_GetRoleResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgS2C_GetRoleResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ReconnectSession != other.ReconnectSession) return false;
    if (!object.Equals(RoleData, other.RoleData)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ReconnectSession.Length != 0) hash ^= ReconnectSession.GetHashCode();
    if (roleData_ != null) hash ^= RoleData.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ReconnectSession.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(ReconnectSession);
    }
    if (roleData_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(RoleData);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ReconnectSession.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ReconnectSession);
    }
    if (roleData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleData);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgS2C_GetRoleResponse other) {
    if (other == null) {
      return;
    }
    if (other.ReconnectSession.Length != 0) {
      ReconnectSession = other.ReconnectSession;
    }
    if (other.roleData_ != null) {
      if (roleData_ == null) {
        roleData_ = new global::MsgBaseRoleData();
      }
      RoleData.MergeFrom(other.RoleData);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          ReconnectSession = input.ReadBytes();
          break;
        }
        case 18: {
          if (roleData_ == null) {
            roleData_ = new global::MsgBaseRoleData();
          }
          input.ReadMessage(roleData_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// client -> gate  [MSGID_C2S_CREATE_ROLE_REQUEST]
/// </summary>
public sealed partial class MsgC2S_CreateRoleRequest : pb::IMessage<MsgC2S_CreateRoleRequest> {
  private static readonly pb::MessageParser<MsgC2S_CreateRoleRequest> _parser = new pb::MessageParser<MsgC2S_CreateRoleRequest>(() => new MsgC2S_CreateRoleRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgC2S_CreateRoleRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_CreateRoleRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_CreateRoleRequest(MsgC2S_CreateRoleRequest other) : this() {
    nickName_ = other.nickName_;
    race_ = other.race_;
    sex_ = other.sex_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_CreateRoleRequest Clone() {
    return new MsgC2S_CreateRoleRequest(this);
  }

  /// <summary>Field number for the "nick_name" field.</summary>
  public const int NickNameFieldNumber = 1;
  private pb::ByteString nickName_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString NickName {
    get { return nickName_; }
    set {
      nickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "race" field.</summary>
  public const int RaceFieldNumber = 2;
  private int race_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Race {
    get { return race_; }
    set {
      race_ = value;
    }
  }

  /// <summary>Field number for the "sex" field.</summary>
  public const int SexFieldNumber = 3;
  private int sex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Sex {
    get { return sex_; }
    set {
      sex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgC2S_CreateRoleRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgC2S_CreateRoleRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NickName != other.NickName) return false;
    if (Race != other.Race) return false;
    if (Sex != other.Sex) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (NickName.Length != 0) hash ^= NickName.GetHashCode();
    if (Race != 0) hash ^= Race.GetHashCode();
    if (Sex != 0) hash ^= Sex.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (NickName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(NickName);
    }
    if (Race != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Race);
    }
    if (Sex != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Sex);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (NickName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(NickName);
    }
    if (Race != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Race);
    }
    if (Sex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgC2S_CreateRoleRequest other) {
    if (other == null) {
      return;
    }
    if (other.NickName.Length != 0) {
      NickName = other.NickName;
    }
    if (other.Race != 0) {
      Race = other.Race;
    }
    if (other.Sex != 0) {
      Sex = other.Sex;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          NickName = input.ReadBytes();
          break;
        }
        case 16: {
          Race = input.ReadInt32();
          break;
        }
        case 24: {
          Sex = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// gate -> client  [MSGID_S2C_CREATE_ROLE_RESPONSE]
/// </summary>
public sealed partial class MsgS2C_CreateRoleResponse : pb::IMessage<MsgS2C_CreateRoleResponse> {
  private static readonly pb::MessageParser<MsgS2C_CreateRoleResponse> _parser = new pb::MessageParser<MsgS2C_CreateRoleResponse>(() => new MsgS2C_CreateRoleResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgS2C_CreateRoleResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_CreateRoleResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_CreateRoleResponse(MsgS2C_CreateRoleResponse other) : this() {
    RoleData = other.roleData_ != null ? other.RoleData.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_CreateRoleResponse Clone() {
    return new MsgS2C_CreateRoleResponse(this);
  }

  /// <summary>Field number for the "role_data" field.</summary>
  public const int RoleDataFieldNumber = 1;
  private global::MsgBaseRoleData roleData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MsgBaseRoleData RoleData {
    get { return roleData_; }
    set {
      roleData_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgS2C_CreateRoleResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgS2C_CreateRoleResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RoleData, other.RoleData)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (roleData_ != null) hash ^= RoleData.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (roleData_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RoleData);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (roleData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleData);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgS2C_CreateRoleResponse other) {
    if (other == null) {
      return;
    }
    if (other.roleData_ != null) {
      if (roleData_ == null) {
        roleData_ = new global::MsgBaseRoleData();
      }
      RoleData.MergeFrom(other.RoleData);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (roleData_ == null) {
            roleData_ = new global::MsgBaseRoleData();
          }
          input.ReadMessage(roleData_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// client -> gate  [MSGID_C2S_DELETE_ROLE_REQUEST]
/// </summary>
public sealed partial class MsgC2S_DeleteRoleRequest : pb::IMessage<MsgC2S_DeleteRoleRequest> {
  private static readonly pb::MessageParser<MsgC2S_DeleteRoleRequest> _parser = new pb::MessageParser<MsgC2S_DeleteRoleRequest>(() => new MsgC2S_DeleteRoleRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgC2S_DeleteRoleRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_DeleteRoleRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_DeleteRoleRequest(MsgC2S_DeleteRoleRequest other) : this() {
    roleId_ = other.roleId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_DeleteRoleRequest Clone() {
    return new MsgC2S_DeleteRoleRequest(this);
  }

  /// <summary>Field number for the "role_id" field.</summary>
  public const int RoleIdFieldNumber = 1;
  private ulong roleId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoleId {
    get { return roleId_; }
    set {
      roleId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgC2S_DeleteRoleRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgC2S_DeleteRoleRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoleId != other.RoleId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoleId != 0UL) hash ^= RoleId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoleId != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(RoleId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoleId != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgC2S_DeleteRoleRequest other) {
    if (other == null) {
      return;
    }
    if (other.RoleId != 0UL) {
      RoleId = other.RoleId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoleId = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
/// gate -> client  [MSGID_S2C_DELETE_ROLE_RESPONSE]
/// </summary>
public sealed partial class MsgS2C_DeleteRoleResponse : pb::IMessage<MsgS2C_DeleteRoleResponse> {
  private static readonly pb::MessageParser<MsgS2C_DeleteRoleResponse> _parser = new pb::MessageParser<MsgS2C_DeleteRoleResponse>(() => new MsgS2C_DeleteRoleResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgS2C_DeleteRoleResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_DeleteRoleResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_DeleteRoleResponse(MsgS2C_DeleteRoleResponse other) : this() {
    roleId_ = other.roleId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_DeleteRoleResponse Clone() {
    return new MsgS2C_DeleteRoleResponse(this);
  }

  /// <summary>Field number for the "role_id" field.</summary>
  public const int RoleIdFieldNumber = 1;
  private ulong roleId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoleId {
    get { return roleId_; }
    set {
      roleId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgS2C_DeleteRoleResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgS2C_DeleteRoleResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RoleId != other.RoleId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RoleId != 0UL) hash ^= RoleId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RoleId != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(RoleId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RoleId != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgS2C_DeleteRoleResponse other) {
    if (other == null) {
      return;
    }
    if (other.RoleId != 0UL) {
      RoleId = other.RoleId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          RoleId = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
/// client -> gate  [MSGID_C2S_ENTER_GAME_REQUEST]  request enter game, send to gate server
/// </summary>
public sealed partial class MsgC2S_EnterGameRequest : pb::IMessage<MsgC2S_EnterGameRequest> {
  private static readonly pb::MessageParser<MsgC2S_EnterGameRequest> _parser = new pb::MessageParser<MsgC2S_EnterGameRequest>(() => new MsgC2S_EnterGameRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgC2S_EnterGameRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_EnterGameRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_EnterGameRequest(MsgC2S_EnterGameRequest other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_EnterGameRequest Clone() {
    return new MsgC2S_EnterGameRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgC2S_EnterGameRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgC2S_EnterGameRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgC2S_EnterGameRequest other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
/// gate -> client  [MSGID_S2C_ENTER_GAME_RESPONSE]  response for enter game request
/// </summary>
public sealed partial class MsgS2C_EnterGameResponse : pb::IMessage<MsgS2C_EnterGameResponse> {
  private static readonly pb::MessageParser<MsgS2C_EnterGameResponse> _parser = new pb::MessageParser<MsgS2C_EnterGameResponse>(() => new MsgS2C_EnterGameResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgS2C_EnterGameResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_EnterGameResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_EnterGameResponse(MsgS2C_EnterGameResponse other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_EnterGameResponse Clone() {
    return new MsgS2C_EnterGameResponse(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgS2C_EnterGameResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgS2C_EnterGameResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgS2C_EnterGameResponse other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
/// gate -> client  [MSGID_S2C_ENTER_GAME_COMPLETE_NOTIFY]  enter game complete
/// </summary>
public sealed partial class MsgS2C_EnterGameCompleteNotify : pb::IMessage<MsgS2C_EnterGameCompleteNotify> {
  private static readonly pb::MessageParser<MsgS2C_EnterGameCompleteNotify> _parser = new pb::MessageParser<MsgS2C_EnterGameCompleteNotify>(() => new MsgS2C_EnterGameCompleteNotify());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgS2C_EnterGameCompleteNotify> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_EnterGameCompleteNotify() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_EnterGameCompleteNotify(MsgS2C_EnterGameCompleteNotify other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_EnterGameCompleteNotify Clone() {
    return new MsgS2C_EnterGameCompleteNotify(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgS2C_EnterGameCompleteNotify);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgS2C_EnterGameCompleteNotify other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgS2C_EnterGameCompleteNotify other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
/// client -> gate  [MSGID_C2S_LEAVE_GAME_REQUEST]
/// </summary>
public sealed partial class MsgC2S_LeaveGameRequest : pb::IMessage<MsgC2S_LeaveGameRequest> {
  private static readonly pb::MessageParser<MsgC2S_LeaveGameRequest> _parser = new pb::MessageParser<MsgC2S_LeaveGameRequest>(() => new MsgC2S_LeaveGameRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgC2S_LeaveGameRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_LeaveGameRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_LeaveGameRequest(MsgC2S_LeaveGameRequest other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_LeaveGameRequest Clone() {
    return new MsgC2S_LeaveGameRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgC2S_LeaveGameRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgC2S_LeaveGameRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgC2S_LeaveGameRequest other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
/// gate -> client  [MSGID_S2C_LEAVE_GAME_RESPONSE]
/// </summary>
public sealed partial class MsgS2C_LeaveGameResponse : pb::IMessage<MsgS2C_LeaveGameResponse> {
  private static readonly pb::MessageParser<MsgS2C_LeaveGameResponse> _parser = new pb::MessageParser<MsgS2C_LeaveGameResponse>(() => new MsgS2C_LeaveGameResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgS2C_LeaveGameResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_LeaveGameResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_LeaveGameResponse(MsgS2C_LeaveGameResponse other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_LeaveGameResponse Clone() {
    return new MsgS2C_LeaveGameResponse(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgS2C_LeaveGameResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgS2C_LeaveGameResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgS2C_LeaveGameResponse other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
/// client -> gate  [MSGID_C2S_RECONNECT_REQUEST]  reconnect request
/// </summary>
public sealed partial class MsgC2S_ReconnectRequest : pb::IMessage<MsgC2S_ReconnectRequest> {
  private static readonly pb::MessageParser<MsgC2S_ReconnectRequest> _parser = new pb::MessageParser<MsgC2S_ReconnectRequest>(() => new MsgC2S_ReconnectRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgC2S_ReconnectRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_ReconnectRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_ReconnectRequest(MsgC2S_ReconnectRequest other) : this() {
    account_ = other.account_;
    reconnectSession_ = other.reconnectSession_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_ReconnectRequest Clone() {
    return new MsgC2S_ReconnectRequest(this);
  }

  /// <summary>Field number for the "account" field.</summary>
  public const int AccountFieldNumber = 1;
  private pb::ByteString account_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Account {
    get { return account_; }
    set {
      account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "reconnect_session" field.</summary>
  public const int ReconnectSessionFieldNumber = 2;
  private pb::ByteString reconnectSession_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ReconnectSession {
    get { return reconnectSession_; }
    set {
      reconnectSession_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgC2S_ReconnectRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgC2S_ReconnectRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Account != other.Account) return false;
    if (ReconnectSession != other.ReconnectSession) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Account.Length != 0) hash ^= Account.GetHashCode();
    if (ReconnectSession.Length != 0) hash ^= ReconnectSession.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Account.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Account);
    }
    if (ReconnectSession.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(ReconnectSession);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Account.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Account);
    }
    if (ReconnectSession.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ReconnectSession);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgC2S_ReconnectRequest other) {
    if (other == null) {
      return;
    }
    if (other.Account.Length != 0) {
      Account = other.Account;
    }
    if (other.ReconnectSession.Length != 0) {
      ReconnectSession = other.ReconnectSession;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Account = input.ReadBytes();
          break;
        }
        case 18: {
          ReconnectSession = input.ReadBytes();
          break;
        }
      }
    }
  }

}

/// <summary>
/// gate -> client  [MSGID_S2C_RECONNECT_RESPONSE]  response for reconnect request
/// </summary>
public sealed partial class MsgS2C_ReconnectResponse : pb::IMessage<MsgS2C_ReconnectResponse> {
  private static readonly pb::MessageParser<MsgS2C_ReconnectResponse> _parser = new pb::MessageParser<MsgS2C_ReconnectResponse>(() => new MsgS2C_ReconnectResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgS2C_ReconnectResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_ReconnectResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_ReconnectResponse(MsgS2C_ReconnectResponse other) : this() {
    reconnectSession_ = other.reconnectSession_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_ReconnectResponse Clone() {
    return new MsgS2C_ReconnectResponse(this);
  }

  /// <summary>Field number for the "reconnect_session" field.</summary>
  public const int ReconnectSessionFieldNumber = 1;
  private pb::ByteString reconnectSession_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ReconnectSession {
    get { return reconnectSession_; }
    set {
      reconnectSession_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgS2C_ReconnectResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgS2C_ReconnectResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ReconnectSession != other.ReconnectSession) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ReconnectSession.Length != 0) hash ^= ReconnectSession.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ReconnectSession.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(ReconnectSession);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ReconnectSession.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ReconnectSession);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgS2C_ReconnectResponse other) {
    if (other == null) {
      return;
    }
    if (other.ReconnectSession.Length != 0) {
      ReconnectSession = other.ReconnectSession;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          ReconnectSession = input.ReadBytes();
          break;
        }
      }
    }
  }

}

/// <summary>
/// client -> gate  [MSGID_C2S_CHAT_REQUEST]  chat request
/// </summary>
public sealed partial class MsgC2S_ChatRequest : pb::IMessage<MsgC2S_ChatRequest> {
  private static readonly pb::MessageParser<MsgC2S_ChatRequest> _parser = new pb::MessageParser<MsgC2S_ChatRequest>(() => new MsgC2S_ChatRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgC2S_ChatRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_ChatRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_ChatRequest(MsgC2S_ChatRequest other) : this() {
    content_ = other.content_;
    chatType_ = other.chatType_;
    channel_ = other.channel_;
    roleId_ = other.roleId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_ChatRequest Clone() {
    return new MsgC2S_ChatRequest(this);
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 1;
  private pb::ByteString content_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Content {
    get { return content_; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "chat_type" field.</summary>
  public const int ChatTypeFieldNumber = 2;
  private uint chatType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ChatType {
    get { return chatType_; }
    set {
      chatType_ = value;
    }
  }

  /// <summary>Field number for the "channel" field.</summary>
  public const int ChannelFieldNumber = 3;
  private uint channel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Channel {
    get { return channel_; }
    set {
      channel_ = value;
    }
  }

  /// <summary>Field number for the "role_id" field.</summary>
  public const int RoleIdFieldNumber = 4;
  private ulong roleId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoleId {
    get { return roleId_; }
    set {
      roleId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgC2S_ChatRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgC2S_ChatRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Content != other.Content) return false;
    if (ChatType != other.ChatType) return false;
    if (Channel != other.Channel) return false;
    if (RoleId != other.RoleId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Content.Length != 0) hash ^= Content.GetHashCode();
    if (ChatType != 0) hash ^= ChatType.GetHashCode();
    if (Channel != 0) hash ^= Channel.GetHashCode();
    if (RoleId != 0UL) hash ^= RoleId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Content.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Content);
    }
    if (ChatType != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(ChatType);
    }
    if (Channel != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Channel);
    }
    if (RoleId != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(RoleId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Content.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
    }
    if (ChatType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChatType);
    }
    if (Channel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Channel);
    }
    if (RoleId != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgC2S_ChatRequest other) {
    if (other == null) {
      return;
    }
    if (other.Content.Length != 0) {
      Content = other.Content;
    }
    if (other.ChatType != 0) {
      ChatType = other.ChatType;
    }
    if (other.Channel != 0) {
      Channel = other.Channel;
    }
    if (other.RoleId != 0UL) {
      RoleId = other.RoleId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Content = input.ReadBytes();
          break;
        }
        case 16: {
          ChatType = input.ReadUInt32();
          break;
        }
        case 24: {
          Channel = input.ReadUInt32();
          break;
        }
        case 32: {
          RoleId = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
/// gate -> client  [MSGID_S2C_CHAT_RESPONSE]  chat response
/// </summary>
public sealed partial class MsgS2C_ChatResponse : pb::IMessage<MsgS2C_ChatResponse> {
  private static readonly pb::MessageParser<MsgS2C_ChatResponse> _parser = new pb::MessageParser<MsgS2C_ChatResponse>(() => new MsgS2C_ChatResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgS2C_ChatResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_ChatResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_ChatResponse(MsgS2C_ChatResponse other) : this() {
    content_ = other.content_;
    chatType_ = other.chatType_;
    channel_ = other.channel_;
    roleId_ = other.roleId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_ChatResponse Clone() {
    return new MsgS2C_ChatResponse(this);
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 1;
  private pb::ByteString content_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Content {
    get { return content_; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "chat_type" field.</summary>
  public const int ChatTypeFieldNumber = 2;
  private uint chatType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ChatType {
    get { return chatType_; }
    set {
      chatType_ = value;
    }
  }

  /// <summary>Field number for the "channel" field.</summary>
  public const int ChannelFieldNumber = 3;
  private uint channel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Channel {
    get { return channel_; }
    set {
      channel_ = value;
    }
  }

  /// <summary>Field number for the "role_id" field.</summary>
  public const int RoleIdFieldNumber = 4;
  private ulong roleId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong RoleId {
    get { return roleId_; }
    set {
      roleId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgS2C_ChatResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgS2C_ChatResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Content != other.Content) return false;
    if (ChatType != other.ChatType) return false;
    if (Channel != other.Channel) return false;
    if (RoleId != other.RoleId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Content.Length != 0) hash ^= Content.GetHashCode();
    if (ChatType != 0) hash ^= ChatType.GetHashCode();
    if (Channel != 0) hash ^= Channel.GetHashCode();
    if (RoleId != 0UL) hash ^= RoleId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Content.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Content);
    }
    if (ChatType != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(ChatType);
    }
    if (Channel != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Channel);
    }
    if (RoleId != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(RoleId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Content.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
    }
    if (ChatType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChatType);
    }
    if (Channel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Channel);
    }
    if (RoleId != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgS2C_ChatResponse other) {
    if (other == null) {
      return;
    }
    if (other.Content.Length != 0) {
      Content = other.Content;
    }
    if (other.ChatType != 0) {
      ChatType = other.ChatType;
    }
    if (other.Channel != 0) {
      Channel = other.Channel;
    }
    if (other.RoleId != 0UL) {
      RoleId = other.RoleId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Content = input.ReadBytes();
          break;
        }
        case 16: {
          ChatType = input.ReadUInt32();
          break;
        }
        case 24: {
          Channel = input.ReadUInt32();
          break;
        }
        case 32: {
          RoleId = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
/// gate -> client  [MSGID_S2C_CHAT_NOTIFY]  chat notify
/// </summary>
public sealed partial class MsgS2C_ChatNotify : pb::IMessage<MsgS2C_ChatNotify> {
  private static readonly pb::MessageParser<MsgS2C_ChatNotify> _parser = new pb::MessageParser<MsgS2C_ChatNotify>(() => new MsgS2C_ChatNotify());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgS2C_ChatNotify> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_ChatNotify() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_ChatNotify(MsgS2C_ChatNotify other) : this() {
    content_ = other.content_;
    chatType_ = other.chatType_;
    channel_ = other.channel_;
    fromRoleId_ = other.fromRoleId_;
    fromNickName_ = other.fromNickName_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_ChatNotify Clone() {
    return new MsgS2C_ChatNotify(this);
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 1;
  private pb::ByteString content_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Content {
    get { return content_; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "chat_type" field.</summary>
  public const int ChatTypeFieldNumber = 2;
  private uint chatType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint ChatType {
    get { return chatType_; }
    set {
      chatType_ = value;
    }
  }

  /// <summary>Field number for the "channel" field.</summary>
  public const int ChannelFieldNumber = 3;
  private uint channel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Channel {
    get { return channel_; }
    set {
      channel_ = value;
    }
  }

  /// <summary>Field number for the "from_role_id" field.</summary>
  public const int FromRoleIdFieldNumber = 4;
  private ulong fromRoleId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong FromRoleId {
    get { return fromRoleId_; }
    set {
      fromRoleId_ = value;
    }
  }

  /// <summary>Field number for the "from_nick_name" field.</summary>
  public const int FromNickNameFieldNumber = 5;
  private pb::ByteString fromNickName_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString FromNickName {
    get { return fromNickName_; }
    set {
      fromNickName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgS2C_ChatNotify);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgS2C_ChatNotify other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Content != other.Content) return false;
    if (ChatType != other.ChatType) return false;
    if (Channel != other.Channel) return false;
    if (FromRoleId != other.FromRoleId) return false;
    if (FromNickName != other.FromNickName) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Content.Length != 0) hash ^= Content.GetHashCode();
    if (ChatType != 0) hash ^= ChatType.GetHashCode();
    if (Channel != 0) hash ^= Channel.GetHashCode();
    if (FromRoleId != 0UL) hash ^= FromRoleId.GetHashCode();
    if (FromNickName.Length != 0) hash ^= FromNickName.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Content.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Content);
    }
    if (ChatType != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(ChatType);
    }
    if (Channel != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Channel);
    }
    if (FromRoleId != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(FromRoleId);
    }
    if (FromNickName.Length != 0) {
      output.WriteRawTag(42);
      output.WriteBytes(FromNickName);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Content.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Content);
    }
    if (ChatType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChatType);
    }
    if (Channel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Channel);
    }
    if (FromRoleId != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FromRoleId);
    }
    if (FromNickName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(FromNickName);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgS2C_ChatNotify other) {
    if (other == null) {
      return;
    }
    if (other.Content.Length != 0) {
      Content = other.Content;
    }
    if (other.ChatType != 0) {
      ChatType = other.ChatType;
    }
    if (other.Channel != 0) {
      Channel = other.Channel;
    }
    if (other.FromRoleId != 0UL) {
      FromRoleId = other.FromRoleId;
    }
    if (other.FromNickName.Length != 0) {
      FromNickName = other.FromNickName;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Content = input.ReadBytes();
          break;
        }
        case 16: {
          ChatType = input.ReadUInt32();
          break;
        }
        case 24: {
          Channel = input.ReadUInt32();
          break;
        }
        case 32: {
          FromRoleId = input.ReadUInt64();
          break;
        }
        case 42: {
          FromNickName = input.ReadBytes();
          break;
        }
      }
    }
  }

}

/// <summary>
/// client -> gate  [MSGID_C2S_SET_ROLE_DATA_REQUEST]
/// </summary>
public sealed partial class MsgC2S_SetRoleDataRequest : pb::IMessage<MsgC2S_SetRoleDataRequest> {
  private static readonly pb::MessageParser<MsgC2S_SetRoleDataRequest> _parser = new pb::MessageParser<MsgC2S_SetRoleDataRequest>(() => new MsgC2S_SetRoleDataRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgC2S_SetRoleDataRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_SetRoleDataRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_SetRoleDataRequest(MsgC2S_SetRoleDataRequest other) : this() {
    RoleData = other.roleData_ != null ? other.RoleData.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_SetRoleDataRequest Clone() {
    return new MsgC2S_SetRoleDataRequest(this);
  }

  /// <summary>Field number for the "role_data" field.</summary>
  public const int RoleDataFieldNumber = 1;
  private global::MsgBaseRoleData roleData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MsgBaseRoleData RoleData {
    get { return roleData_; }
    set {
      roleData_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgC2S_SetRoleDataRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgC2S_SetRoleDataRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RoleData, other.RoleData)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (roleData_ != null) hash ^= RoleData.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (roleData_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RoleData);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (roleData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleData);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgC2S_SetRoleDataRequest other) {
    if (other == null) {
      return;
    }
    if (other.roleData_ != null) {
      if (roleData_ == null) {
        roleData_ = new global::MsgBaseRoleData();
      }
      RoleData.MergeFrom(other.RoleData);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (roleData_ == null) {
            roleData_ = new global::MsgBaseRoleData();
          }
          input.ReadMessage(roleData_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// gate -> client  [MSGID_S2C_SET_ROLE_DATA_RESPONSE]
/// </summary>
public sealed partial class MsgS2C_SetRoleDataResponse : pb::IMessage<MsgS2C_SetRoleDataResponse> {
  private static readonly pb::MessageParser<MsgS2C_SetRoleDataResponse> _parser = new pb::MessageParser<MsgS2C_SetRoleDataResponse>(() => new MsgS2C_SetRoleDataResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgS2C_SetRoleDataResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_SetRoleDataResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_SetRoleDataResponse(MsgS2C_SetRoleDataResponse other) : this() {
    RoleData = other.roleData_ != null ? other.RoleData.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_SetRoleDataResponse Clone() {
    return new MsgS2C_SetRoleDataResponse(this);
  }

  /// <summary>Field number for the "role_data" field.</summary>
  public const int RoleDataFieldNumber = 1;
  private global::MsgBaseRoleData roleData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MsgBaseRoleData RoleData {
    get { return roleData_; }
    set {
      roleData_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgS2C_SetRoleDataResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgS2C_SetRoleDataResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(RoleData, other.RoleData)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (roleData_ != null) hash ^= RoleData.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (roleData_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(RoleData);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (roleData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoleData);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgS2C_SetRoleDataResponse other) {
    if (other == null) {
      return;
    }
    if (other.roleData_ != null) {
      if (roleData_ == null) {
        roleData_ = new global::MsgBaseRoleData();
      }
      RoleData.MergeFrom(other.RoleData);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (roleData_ == null) {
            roleData_ = new global::MsgBaseRoleData();
          }
          input.ReadMessage(roleData_);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
