// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from login.proto</summary>
public static partial class LoginReflection {

  #region Descriptor
  /// <summary>File descriptor for login.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static LoginReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cgtsb2dpbi5wcm90byI4ChNNc2dDMlNfTG9naW5SZXF1ZXN0Eg8KB2FjY291",
          "bnQYASABKAwSEAoIcGFzc3dvcmQYAiABKAwiUgoNTXNnU2VydmVySW5mbxIK",
          "CgJpZBgBIAEoBRIMCgRuYW1lGAIgASgMEhYKDmlzX21haW50ZW5hbmNlGAMg",
          "ASgIEg8KB2lzX2J1c3kYBCABKAgiNwoUTXNnUzJDX0xvZ2luUmVzcG9uc2US",
          "HwoHc2VydmVycxgBIAMoCzIOLk1zZ1NlcnZlckluZm8iLAoaTXNnQzJTX1Nl",
          "bGVjdFNlcnZlclJlcXVlc3QSDgoGc2VsX2lkGAEgASgFIlQKG01zZ1MyQ19T",
          "ZWxlY3RTZXJ2ZXJSZXNwb25zZRIUCgxzZXNzaW9uX2NvZGUYASABKAwSEQoJ",
          "c2VydmVyX2lwGAIgASgMEgwKBHBvcnQYAyABKAUiJgoSTXNnQzJTX0VjaG9S",
          "ZXF1ZXN0EhAKCGVjaG9fc3RyGAEgASgMIicKE01zZ1MyQ19FY2hvUmVzcG9u",
          "c2USEAoIZWNob19zdHIYASABKAxiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgC2S_LoginRequest), global::MsgC2S_LoginRequest.Parser, new[]{ "Account", "Password" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgServerInfo), global::MsgServerInfo.Parser, new[]{ "Id", "Name", "IsMaintenance", "IsBusy" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgS2C_LoginResponse), global::MsgS2C_LoginResponse.Parser, new[]{ "Servers" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgC2S_SelectServerRequest), global::MsgC2S_SelectServerRequest.Parser, new[]{ "SelId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgS2C_SelectServerResponse), global::MsgS2C_SelectServerResponse.Parser, new[]{ "SessionCode", "ServerIp", "Port" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgC2S_EchoRequest), global::MsgC2S_EchoRequest.Parser, new[]{ "EchoStr" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MsgS2C_EchoResponse), global::MsgS2C_EchoResponse.Parser, new[]{ "EchoStr" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// client -> login  [MSGID_C2S_LOGIN_REQUEST]  login request, send to login server
/// </summary>
public sealed partial class MsgC2S_LoginRequest : pb::IMessage<MsgC2S_LoginRequest> {
  private static readonly pb::MessageParser<MsgC2S_LoginRequest> _parser = new pb::MessageParser<MsgC2S_LoginRequest>(() => new MsgC2S_LoginRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgC2S_LoginRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LoginReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_LoginRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_LoginRequest(MsgC2S_LoginRequest other) : this() {
    account_ = other.account_;
    password_ = other.password_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_LoginRequest Clone() {
    return new MsgC2S_LoginRequest(this);
  }

  /// <summary>Field number for the "account" field.</summary>
  public const int AccountFieldNumber = 1;
  private pb::ByteString account_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Account {
    get { return account_; }
    set {
      account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 2;
  private pb::ByteString password_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgC2S_LoginRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgC2S_LoginRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Account != other.Account) return false;
    if (Password != other.Password) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Account.Length != 0) hash ^= Account.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Account.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(Account);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Password);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Account.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Account);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Password);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgC2S_LoginRequest other) {
    if (other == null) {
      return;
    }
    if (other.Account.Length != 0) {
      Account = other.Account;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Account = input.ReadBytes();
          break;
        }
        case 18: {
          Password = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class MsgServerInfo : pb::IMessage<MsgServerInfo> {
  private static readonly pb::MessageParser<MsgServerInfo> _parser = new pb::MessageParser<MsgServerInfo>(() => new MsgServerInfo());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgServerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LoginReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgServerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgServerInfo(MsgServerInfo other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    isMaintenance_ = other.isMaintenance_;
    isBusy_ = other.isBusy_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgServerInfo Clone() {
    return new MsgServerInfo(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private pb::ByteString name_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "is_maintenance" field.</summary>
  public const int IsMaintenanceFieldNumber = 3;
  private bool isMaintenance_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsMaintenance {
    get { return isMaintenance_; }
    set {
      isMaintenance_ = value;
    }
  }

  /// <summary>Field number for the "is_busy" field.</summary>
  public const int IsBusyFieldNumber = 4;
  private bool isBusy_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsBusy {
    get { return isBusy_; }
    set {
      isBusy_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgServerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgServerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (IsMaintenance != other.IsMaintenance) return false;
    if (IsBusy != other.IsBusy) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (IsMaintenance != false) hash ^= IsMaintenance.GetHashCode();
    if (IsBusy != false) hash ^= IsBusy.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Name);
    }
    if (IsMaintenance != false) {
      output.WriteRawTag(24);
      output.WriteBool(IsMaintenance);
    }
    if (IsBusy != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsBusy);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
    }
    if (IsMaintenance != false) {
      size += 1 + 1;
    }
    if (IsBusy != false) {
      size += 1 + 1;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgServerInfo other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.IsMaintenance != false) {
      IsMaintenance = other.IsMaintenance;
    }
    if (other.IsBusy != false) {
      IsBusy = other.IsBusy;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 18: {
          Name = input.ReadBytes();
          break;
        }
        case 24: {
          IsMaintenance = input.ReadBool();
          break;
        }
        case 32: {
          IsBusy = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// login -> client  [MSGID_S2C_LOGIN_RESPONSE]  login response
/// </summary>
public sealed partial class MsgS2C_LoginResponse : pb::IMessage<MsgS2C_LoginResponse> {
  private static readonly pb::MessageParser<MsgS2C_LoginResponse> _parser = new pb::MessageParser<MsgS2C_LoginResponse>(() => new MsgS2C_LoginResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgS2C_LoginResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LoginReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_LoginResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_LoginResponse(MsgS2C_LoginResponse other) : this() {
    servers_ = other.servers_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_LoginResponse Clone() {
    return new MsgS2C_LoginResponse(this);
  }

  /// <summary>Field number for the "servers" field.</summary>
  public const int ServersFieldNumber = 1;
  private static readonly pb::FieldCodec<global::MsgServerInfo> _repeated_servers_codec
      = pb::FieldCodec.ForMessage(10, global::MsgServerInfo.Parser);
  private readonly pbc::RepeatedField<global::MsgServerInfo> servers_ = new pbc::RepeatedField<global::MsgServerInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MsgServerInfo> Servers {
    get { return servers_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgS2C_LoginResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgS2C_LoginResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!servers_.Equals(other.servers_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= servers_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    servers_.WriteTo(output, _repeated_servers_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += servers_.CalculateSize(_repeated_servers_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgS2C_LoginResponse other) {
    if (other == null) {
      return;
    }
    servers_.Add(other.servers_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          servers_.AddEntriesFrom(input, _repeated_servers_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// client -> login  [MSGID_C2S_SELECT_SERVER_REQUEST]  request to select server, and then notify gate server
/// </summary>
public sealed partial class MsgC2S_SelectServerRequest : pb::IMessage<MsgC2S_SelectServerRequest> {
  private static readonly pb::MessageParser<MsgC2S_SelectServerRequest> _parser = new pb::MessageParser<MsgC2S_SelectServerRequest>(() => new MsgC2S_SelectServerRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgC2S_SelectServerRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LoginReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_SelectServerRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_SelectServerRequest(MsgC2S_SelectServerRequest other) : this() {
    selId_ = other.selId_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_SelectServerRequest Clone() {
    return new MsgC2S_SelectServerRequest(this);
  }

  /// <summary>Field number for the "sel_id" field.</summary>
  public const int SelIdFieldNumber = 1;
  private int selId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SelId {
    get { return selId_; }
    set {
      selId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgC2S_SelectServerRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgC2S_SelectServerRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SelId != other.SelId) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SelId != 0) hash ^= SelId.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SelId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(SelId);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SelId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelId);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgC2S_SelectServerRequest other) {
    if (other == null) {
      return;
    }
    if (other.SelId != 0) {
      SelId = other.SelId;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          SelId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// login -> client  [MSGID_S2C_SELECT_SERVER_RESPONSE]  after get response from gate server, to response client select result
/// </summary>
public sealed partial class MsgS2C_SelectServerResponse : pb::IMessage<MsgS2C_SelectServerResponse> {
  private static readonly pb::MessageParser<MsgS2C_SelectServerResponse> _parser = new pb::MessageParser<MsgS2C_SelectServerResponse>(() => new MsgS2C_SelectServerResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgS2C_SelectServerResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LoginReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_SelectServerResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_SelectServerResponse(MsgS2C_SelectServerResponse other) : this() {
    sessionCode_ = other.sessionCode_;
    serverIp_ = other.serverIp_;
    port_ = other.port_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_SelectServerResponse Clone() {
    return new MsgS2C_SelectServerResponse(this);
  }

  /// <summary>Field number for the "session_code" field.</summary>
  public const int SessionCodeFieldNumber = 1;
  private pb::ByteString sessionCode_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString SessionCode {
    get { return sessionCode_; }
    set {
      sessionCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "server_ip" field.</summary>
  public const int ServerIpFieldNumber = 2;
  private pb::ByteString serverIp_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString ServerIp {
    get { return serverIp_; }
    set {
      serverIp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "port" field.</summary>
  public const int PortFieldNumber = 3;
  private int port_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Port {
    get { return port_; }
    set {
      port_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgS2C_SelectServerResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgS2C_SelectServerResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SessionCode != other.SessionCode) return false;
    if (ServerIp != other.ServerIp) return false;
    if (Port != other.Port) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SessionCode.Length != 0) hash ^= SessionCode.GetHashCode();
    if (ServerIp.Length != 0) hash ^= ServerIp.GetHashCode();
    if (Port != 0) hash ^= Port.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SessionCode.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(SessionCode);
    }
    if (ServerIp.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(ServerIp);
    }
    if (Port != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Port);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SessionCode.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(SessionCode);
    }
    if (ServerIp.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(ServerIp);
    }
    if (Port != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgS2C_SelectServerResponse other) {
    if (other == null) {
      return;
    }
    if (other.SessionCode.Length != 0) {
      SessionCode = other.SessionCode;
    }
    if (other.ServerIp.Length != 0) {
      ServerIp = other.ServerIp;
    }
    if (other.Port != 0) {
      Port = other.Port;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          SessionCode = input.ReadBytes();
          break;
        }
        case 18: {
          ServerIp = input.ReadBytes();
          break;
        }
        case 24: {
          Port = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// client -> login  [MSGID_C2S_ECHO_REQUEST]
/// </summary>
public sealed partial class MsgC2S_EchoRequest : pb::IMessage<MsgC2S_EchoRequest> {
  private static readonly pb::MessageParser<MsgC2S_EchoRequest> _parser = new pb::MessageParser<MsgC2S_EchoRequest>(() => new MsgC2S_EchoRequest());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgC2S_EchoRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LoginReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_EchoRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_EchoRequest(MsgC2S_EchoRequest other) : this() {
    echoStr_ = other.echoStr_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgC2S_EchoRequest Clone() {
    return new MsgC2S_EchoRequest(this);
  }

  /// <summary>Field number for the "echo_str" field.</summary>
  public const int EchoStrFieldNumber = 1;
  private pb::ByteString echoStr_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString EchoStr {
    get { return echoStr_; }
    set {
      echoStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgC2S_EchoRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgC2S_EchoRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EchoStr != other.EchoStr) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EchoStr.Length != 0) hash ^= EchoStr.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EchoStr.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(EchoStr);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EchoStr.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(EchoStr);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgC2S_EchoRequest other) {
    if (other == null) {
      return;
    }
    if (other.EchoStr.Length != 0) {
      EchoStr = other.EchoStr;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          EchoStr = input.ReadBytes();
          break;
        }
      }
    }
  }

}

/// <summary>
/// login -> client  [MSGID_S2C_ECHO_RESPONSE]
/// </summary>
public sealed partial class MsgS2C_EchoResponse : pb::IMessage<MsgS2C_EchoResponse> {
  private static readonly pb::MessageParser<MsgS2C_EchoResponse> _parser = new pb::MessageParser<MsgS2C_EchoResponse>(() => new MsgS2C_EchoResponse());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MsgS2C_EchoResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::LoginReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_EchoResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_EchoResponse(MsgS2C_EchoResponse other) : this() {
    echoStr_ = other.echoStr_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MsgS2C_EchoResponse Clone() {
    return new MsgS2C_EchoResponse(this);
  }

  /// <summary>Field number for the "echo_str" field.</summary>
  public const int EchoStrFieldNumber = 1;
  private pb::ByteString echoStr_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString EchoStr {
    get { return echoStr_; }
    set {
      echoStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MsgS2C_EchoResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MsgS2C_EchoResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EchoStr != other.EchoStr) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EchoStr.Length != 0) hash ^= EchoStr.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EchoStr.Length != 0) {
      output.WriteRawTag(10);
      output.WriteBytes(EchoStr);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EchoStr.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(EchoStr);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MsgS2C_EchoResponse other) {
    if (other == null) {
      return;
    }
    if (other.EchoStr.Length != 0) {
      EchoStr = other.EchoStr;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          EchoStr = input.ReadBytes();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
