#include "generate_manager.h"
#include <thread>
#include <chrono>
#include <iostream>

GenerateManager::GenerateManager()
{
}

GenerateManager::~GenerateManager()
{
}

void GenerateManager::close()
{
	out_file_.flush();
	std::this_thread::sleep_for(std::chrono::milliseconds(100));
	out_file_.close();
	std::cout << "generated csv_list_manager.h" << std::endl;
}

bool GenerateManager::loadOne(const char* csv_name, const char* source_name, const char* class_name)
{
	CsvInfo ci;
	ci.file_name = csv_name;
	ci.source_name = source_name;
	ci.class_name = class_name;
	csv_info_list_.push_back(ci);
	return true;
}

bool GenerateManager::generate()
{
	out_file_.open("csv_list_manager.h", std::ios::out);
	out_file_ << "// Generated by the csv_generator.  DO NOT EDIT!" << std::endl;
	out_file_ << "#pragma once" << std::endl;
	
	std::list<CsvInfo>::iterator it = csv_info_list_.begin();
	for (; it!=csv_info_list_.end(); ++it) {
		out_file_ << "#include \"csv/" << it->source_name << "\"" << std::endl;
	}
	out_file_ << "#include \"../libjmy/jmy_singleton.hpp\"" << std::endl;
	out_file_ << std::endl;

	out_file_ << "class CsvListManager : public JmySingleton<CsvListManager>" << std::endl;
	out_file_ << "{" << std::endl;
	out_file_ << "public:" << std::endl;

	// close function
	out_file_ << "  void close() {" << std::endl;
	it = csv_info_list_.begin();
	for (; it!=csv_info_list_.end(); ++it) {
		out_file_ << "    " << it->class_name << "_.close();" << std::endl;
	}
	out_file_ << "  }" << std::endl;

	// load function
	out_file_ << "  bool loadCsv() {" << std::endl;
	it = csv_info_list_.begin();
	for (; it!=csv_info_list_.end(); ++it) {
		out_file_ << "    if (!" << it->class_name << "_.load(\"csv/" << it->file_name << "\")) {" << std::endl;
		out_file_ << "      std::cout << \"load file " << it->file_name << " failed\" << std::endl;" << std::endl;
		out_file_ << "      return false;" << std::endl;
		out_file_ << "    }" << std::endl;
	}
	out_file_ << "    return true;" << std::endl;
	out_file_ << "  }" << std::endl;

	// get function
	it = csv_info_list_.begin();
	for (; it!=csv_info_list_.end(); ++it) {
		out_file_ << "  " << it->class_name << "& get_" << it->class_name << "() {" << std::endl;
		out_file_ << "    return " << it->class_name << "_;" << std::endl;
		out_file_ << "  }" << std::endl;
	}
	out_file_ << "private:" << std::endl;
	it = csv_info_list_.begin();
	for (; it!=csv_info_list_.end(); ++it) {
		out_file_ << "  " << it->class_name << " " << it->class_name << "_;" << std::endl;
	}
	out_file_ << "};" << std::endl;
	out_file_ << std::endl;
	out_file_ << "#define CSV_MGR CsvListManager::getInstance()" << std::endl;
	return true;
}
