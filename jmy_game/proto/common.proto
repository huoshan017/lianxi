syntax="proto3";
import "error.proto";

enum MsgIdType {
	MSGID_NONE								= 0;
	MSGID_ERROR								= 1;
	/* Client <-> LoginServer */
	MSGID_C2S_LOGIN_REQUEST					= 10000; // login request
	MSGID_S2C_LOGIN_RESPONSE				= 10001; // login response
	MSGID_C2S_SELECT_SERVER_REQUEST			= 10002; // select server
	MSGID_S2C_SELECT_SERVER_RESPONSE		= 10003; // select server response
	/* Client <-> GateServer */
	MSGID_C2S_GET_ROLE_REQUEST				= 10010; // get role request
	MSGID_S2C_GET_ROLE_RESPONSE				= 10011; // get role response
	//MSGID_C2S_ROLELIST_REQUEST				= 10012; // role list request
	//MSGID_C2S_ROLELIST_RESPONSE				= 10013; // role list response
	MSGID_C2S_CREATE_ROLE_REQUEST			= 10014; // create role request
	MSGID_S2C_CREATE_ROLE_RESPONSE			= 10015; // create role response
	MSGID_C2S_DELETE_ROLE_REQUEST			= 10016; // delete role request
	MSGID_S2C_DELETE_ROLE_RESPONSE			= 10017; // delete role response
	MSGID_C2S_ENTER_GAME_REQUEST			= 10020; // enter game request
	MSGID_S2C_ENTER_GAME_RESPONSE			= 10021; // enter game response
	MSGID_S2C_ENTER_GAME_COMPLETE_NOTIFY	= 10022; // enter game complete notify
	MSGID_C2S_LEAVE_GAME_REQUEST			= 10023; // leave game request
	MSGID_S2C_LEAVE_GAME_RESPONSE			= 10024; // leave game response
	MSGID_C2S_RECONNECT_REQUEST				= 10025; // reconnect gate server
	MSGID_S2C_RECONNECT_RESPONSE			= 10026; // reconnect response
}

message MsgError {
	ProtoErrorType error_code = 1;
}

// client -> login  [MSGID_C2S_LOGIN_REQUEST]  login request, send to login server
message MsgC2S_LoginRequest {
	bytes account = 1;
	bytes password = 2;
}

message MsgServerInfo {
	int32 id = 1;
	bytes name = 2;
	bool is_maintenance = 3;
	bool is_busy = 4;
}

// login -> client  [MSGID_S2C_LOGIN_RESPONSE]  login response
message MsgS2C_LoginResponse {
	repeated MsgServerInfo servers = 1;
}

// client -> login  [MSGID_C2S_SELECT_SERVER_REQUEST]  request to select server, and then notify gate server
message MsgC2S_SelectServerRequest {
	int32 sel_id = 1;
}

// login -> client  [MSGID_S2C_SELECT_SERVER_RESPONSE]  after get response from gate server, to response client select result
message MsgS2C_SelectServerResponse {
	bytes session_code = 1;
	bytes server_ip = 2;
	int32 port = 3;
}

// client -> gate  [MSGID_C2S_GET_ROLE_REQUEST]
message MsgC2S_GetRoleRequest {
	bytes account = 1;
	bytes enter_session = 2;
}

// role list data
message MsgBaseRoleData {
	uint64 role_id = 1;
	bytes nick_name = 2;
	int32 race = 3;
	int32 sex = 4;
	int32 hp = 5;
	int32 level = 6;
}

// gate -> client  [MSGID_S2C_GET_ROLE_RESPONSE]
message MsgS2C_GetRoleResponse {
	bytes reconnect_session = 1;
	repeated MsgBaseRoleData role_list = 2;
	int32 max_role_count = 3;
}

// client -> gate  [MSGID_C2S_ROLELIST_REQUEST]
//message MsgC2S_RoleListRequest {
//}

// gate -> client  [MSGID_S2C_ROLELIST_RESPONSE]
//message MsgS2C_RoleListResponse {
//	repeated MsgRoleData role_list = 1;
//}

// client -> gate  [MSGID_C2S_CREATE_ROLE_REQUEST]
message MsgC2S_CreateRoleRequest {
	bytes nick_name = 1;
	int32 race = 2;
	int32 sex = 3;
}

// gate -> client  [MSGID_S2C_CREATE_ROLE_RESPONSE]
message MsgS2C_CreateRoleResponse {
	MsgBaseRoleData role_data = 1;
}

// client -> gate  [MSGID_C2S_DELETE_ROLE_REQUEST]
message MsgC2S_DeleteRoleRequest {
	uint64 role_id = 1;
}

// gate -> client  [MSGID_S2C_DELETE_ROLE_RESPONSE]
message MsgS2C_DeleteRoleResponse {
	uint64 role_id = 1;
}

// client -> gate  [MSGID_C2S_ENTER_GAME_REQUEST]  request enter game, send to gate server
message MsgC2S_EnterGameRequest {
	uint64 role_id = 1;
}

// gate -> client  [MSGID_S2C_ENTER_GAME_RESPONSE]  response for enter game request
message MsgS2C_EnterGameResponse {
	uint64 role_id = 1;
}

// gate -> client  [MSGID_S2C_ENTER_GAME_COMPLETE_NOTIFY]  enter game complete
message MsgS2C_EnterGameCompleteNotify {
}

// client -> gate  [MSGID_C2S_LEAVE_GAME_REQUEST]
message MsgC2S_LeaveGameRequest {
}

// gate -> client  [MSGID_S2C_LEAVE_GAME_RESPONSE]
message MsgS2C_LeaveGameResponse {
}

// client -> gate  [MSGID_C2S_RECONNECT_REQUEST]  reconnect request
message MsgC2S_ReconnectRequest {
	bytes account = 1;
	bytes reconnect_session = 2;
}

// gate -> client  [MSGID_S2C_RECONNECT_RESPONSE]  response for reconnect request
message MsgS2C_ReconnectResponse {
	bytes reconnect_session = 1;
}
